import PDFDocument from 'pdfkit';
import { uploadToCloudinary } from '~/services/cloudinaryService';
import { ApiError } from '~/utils/apiError';
import httpStatus from 'http-status';

/**
 * Generate a stamp cover page based on state and value
 * @param {Object} params - Parameters for stamp generation
 * @param {string} params.state - State for which stamp is being generated
 * @param {number} params.value - Stamp value in rupees
 * @param {string} params.contractId - ID of the contract being stamped
 * @returns {Promise<string>} URL of the generated cover page
 */
export const generateStampCoverPage = async ({ state, value, contractId }) => {
	try {
		// Create a new PDF document
		const doc = new PDFDocument({
			size: 'A4',
			margin: 50
		});

		// Add header
		doc.fontSize(20).text('STAMP DUTY COVER PAGE', { align: 'center' }).moveDown();

		// Add state and value details
		doc
			.fontSize(12)
			.text(`State: ${state}`, { align: 'left' })
			.text(`Stamp Value: ₹${value.toLocaleString('en-IN')}`, { align: 'left' })
			.moveDown();

		// Add stamp duty details
		doc
			.fontSize(12)
			.text('Stamp Duty Details:', { underline: true })
			.moveDown(0.5)
			.text(`• Document Type: Contract`)
			.text(`• Stamp Duty Paid: Yes`)
			.text(`• Payment Date: ${new Date().toLocaleDateString()}`)
			.text(`• Unique Reference: ${contractId}`)
			.moveDown();

		// Add legal notice
		doc
			.fontSize(10)
			.text('Legal Notice:', { underline: true })
			.moveDown(0.5)
			.text(
				'This document has been duly stamped in accordance with the Indian Stamp Act, 1899. The stamp duty has been paid and verified by the competent authority.',
				{ align: 'justify' }
			)
			.moveDown();

		// Add footer
		doc.fontSize(10).text('Generated by LexiDraft', { align: 'center' }).text(new Date().toLocaleString(), { align: 'center' });

		// Finalize the PDF
		doc.end();

		// Upload to Cloudinary
		const folder = `stamps/${contractId}`;
		const url = await uploadToCloudinary(doc, folder, {
			resource_type: 'raw',
			format: 'pdf'
		});

		return url;
	} catch (error) {
		throw new ApiError(httpStatus.INTERNAL_SERVER_ERROR, 'Error generating stamp cover page: ' + error.message);
	}
};

/**
 * Calculate stamp duty based on state and value
 * @param {string} state - State for which stamp duty is being calculated
 * @param {number} value - Value of the contract in rupees
 * @returns {number} Stamp duty amount in rupees
 */
export const calculateStampDuty = (state, value) => {
	// This is a simplified calculation. In reality, you would need to implement
	// state-specific stamp duty rules and rates
	const rates = {
		Maharashtra: 0.5, // 0.5% of contract value
		Delhi: 0.5,
		Karnataka: 0.5,
		default: 0.5
	};

	const rate = rates[state] || rates.default;
	return Math.ceil(value * (rate / 100));
};

/**
 * Validate stamp duty requirements
 * @param {string} state - State for which stamp duty is being validated
 * @param {number} value - Value of the contract in rupees
 * @returns {Object} Validation result with required stamp duty
 */
export const validateStampDuty = (state, value) => {
	const requiredDuty = calculateStampDuty(state, value);
	const minimumDuty = 100; // Minimum stamp duty amount

	return {
		isValid: requiredDuty >= minimumDuty,
		requiredDuty,
		minimumDuty,
		message: requiredDuty >= minimumDuty ? 'Stamp duty requirement satisfied' : `Minimum stamp duty of ₹${minimumDuty} required`
	};
};
